-- Joins_and_Unions.sql
-- This script provides an intermediate-level lesson on MySQL joins and unions for data analysts and scientists.
-- It includes 15 example queries with explanations, followed by 15 practice questions with answers.
-- Assumes the 'mysql_learning' database and sample datasets (customers, orders, products, employees) are loaded.

-- Use the mysql_learning database
USE mysql_learning;

-- =====================================
-- Lesson: MySQL Joins and Unions
-- =====================================
-- The following queries demonstrate core MySQL concepts: INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN, and UNION.

-- 1. INNER JOIN: Combine matching rows from two tables
-- Purpose: List orders with customer names
SELECT o.order_id, o.order_amount, c.first_name, c.last_name
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id;

-- 2. LEFT JOIN: Include all rows from the left table
-- Purpose: List all customers, including those without orders
SELECT c.customer_id, c.first_name, c.last_name, o.order_id
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id;

-- 3. RIGHT JOIN: Include all rows from the right table
-- Purpose: List all orders, including any without associated customers
SELECT o.order_id, o.order_amount, c.first_name, c.last_name
FROM orders o
RIGHT JOIN customers c ON o.customer_id = c.customer_id;

-- 4. FULL JOIN (simulated): Include all rows from both tables
-- Purpose: Combine all customers and orders, showing matches and non-matches
-- Note: MySQL does not support FULL JOIN; use UNION of LEFT and RIGHT JOIN
SELECT c.customer_id, c.first_name, c.last_name, o.order_id
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
UNION
SELECT c.customer_id, c.first_name, c.last_name, o.order_id
FROM customers c
RIGHT JOIN orders o ON c.customer_id = o.customer_id;

-- 5. Multiple JOINs: Combine more than two tables
-- Purpose: List order details with customer and product information
SELECT o.order_id, c.first_name, c.last_name, p.product_name
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id
INNER JOIN order_details od ON o.order_id = od.order_id
INNER JOIN products p ON od.product_id = p.product_id;

-- 6. INNER JOIN with WHERE: Filter joined results
-- Purpose: Find orders from New York customers
SELECT o.order_id, o.order_amount, c.first_name, c.last_name
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id
WHERE c.city = 'New York';

-- 7. LEFT JOIN with NULL check: Find unmatched rows
-- Purpose: Identify customers who have not placed orders
SELECT c.customer_id, c.first_name, c.last_name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;

-- 8. RIGHT JOIN with NULL check: Find unmatched rows
-- Purpose: Identify orders without associated customers
SELECT o.order_id, o.order_amount
FROM orders o
RIGHT JOIN customers c ON o.customer_id = c.customer_id
WHERE c.customer_id IS NULL;

-- 9. UNION: Combine results from two queries
-- Purpose: List unique cities from customers and employees
SELECT city FROM customers
UNION
SELECT city FROM employees;

-- 10. UNION ALL: Combine results without removing duplicates
-- Purpose: List all cities from customers and employees, including duplicates
SELECT city FROM customers
UNION ALL
SELECT city FROM employees;

-- 11. JOIN with aggregate: Aggregate data after joining
-- Purpose: Calculate total order amount per customer
SELECT c.customer_id, c.first_name, c.last_name, SUM(o.order_amount) AS total_spent
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- 12. Self JOIN: Join a table to itself
-- Purpose: Find employees who report to the same manager
SELECT e1.employee_id, e1.first_name, e1.last_name, e2.first_name AS manager_name
FROM employees e1
INNER JOIN employees e2 ON e1.manager_id = e2.employee_id;

-- 13. JOIN with ORDER BY and LIMIT: Sort and limit joined results
-- Purpose: Find top 5 customers by order amount
SELECT c.first_name, c.last_name, o.order_amount
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
ORDER BY o.order_amount DESC
LIMIT 5;

-- 14. UNION with different columns: Align columns for combining
-- Purpose: Combine customer and employee names into a single list
SELECT first_name, last_name, 'Customer' AS role
FROM customers
UNION
SELECT first_name, last_name, 'Employee' AS role
FROM employees;

-- 15. Complex JOIN with multiple conditions
-- Purpose: Find orders with specific products and customer locations
SELECT o.order_id, c.first_name, c.last_name, p.product_name
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id
INNER JOIN order_details od ON o.order_id = od.order_id
INNER JOIN products p ON od.product_id = p.product_id
WHERE c.city = 'Chicago' AND p.category = 'Electronics';

-- Lesson Notes:
-- - `INNER JOIN` only returns rows with matching records in both tables.
-- - `LEFT JOIN` includes all rows from the left table, with NULLs for non-matching right table rows.
-- - `RIGHT JOIN` includes all rows from the right table, with NULLs for non-matching left table rows.
-- - MySQL does not natively support `FULL JOIN`; simulate it using `UNION` of `LEFT` and `RIGHT JOIN`.
-- - `UNION` removes duplicates; `UNION ALL` keeps them and is faster.
-- - Ensure join conditions use indexed columns for performance.

-- =====================================
-- Practice Questions and Answers
-- =====================================
-- The following 15 questions test your understanding of joins and unions. Each question includes an explanation and the SQL query as the answer.

-- Question 1: How do you list orders with customer names using an INNER JOIN?
-- Explanation: `INNER JOIN` matches rows between `orders` and `customers` based on `customer_id`.
-- Answer:
SELECT o.order_id, o.order_amount, c.first_name, c.last_name
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id;

-- Question 2: How can you list all customers, including those without orders?
-- Explanation: Use `LEFT JOIN` to include all `customers` rows, with NULLs for non-matching `orders`.
-- Answer:
SELECT c.customer_id, c.first_name, c.last_name, o.order_id
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id;

-- Question 3: How do you list all orders, including any without associated customers?
-- Explanation: Use `RIGHT JOIN` to include all `orders` rows, with NULLs for non-matching `customers`.
-- Answer:
SELECT o.order_id, o.order_amount, c.first_name, c.last_name
FROM orders o
RIGHT JOIN customers c ON o.customer_id = c.customer_id;

-- Question 4: How can you simulate a FULL JOIN to show all customers and orders?
-- Explanation: Combine `LEFT JOIN` and `RIGHT JOIN` with `UNION` to simulate `FULL JOIN`.
-- Answer:
SELECT c.customer_id, c.first_name, c.last_name, o.order_id
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
UNION
SELECT c.customer_id, c.first_name, c.last_name, o.order_id
FROM customers c
RIGHT JOIN orders o ON c.customer_id = o.customer_id;

-- Question 5: How do you list order details with customer and product names?
-- Explanation: Use multiple `INNER JOIN`s to link `orders`, `customers`, `order_details`, and `products`.
-- Answer:
SELECT o.order_id, c.first_name, c.last_name, p.product_name
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id
INNER JOIN order_details od ON o.order_id = od.order_id
INNER JOIN products p ON od.product_id = p.product_id;

-- Question 6: How can you find orders from California customers?
-- Explanation: Use `INNER JOIN` with a `WHERE` clause to filter by customer state.
-- Answer:
SELECT o.order_id, o.order_amount, c.first_name, c.last_name
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id
WHERE c.state = 'CA';

-- Question 7: How do you identify customers who have not placed orders?
-- Explanation: Use `LEFT JOIN` and check for NULLs in the `orders` table.
-- Answer:
SELECT c.customer_id, c.first_name, c.last_name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;

-- Question 8: How can you find orders without associated customers?
-- Explanation: Use `RIGHT JOIN` and check for NULLs in the `customers` table.
-- Answer:
SELECT o.order_id, o.order_amount
FROM orders o
RIGHT JOIN customers c ON o.customer_id = c.customer_id
WHERE c.customer_id IS NULL;

-- Question 9: How do you combine unique cities from customers and employees?
-- Explanation: Use `UNION` to combine results and remove duplicates.
-- Answer:
SELECT city FROM customers
UNION
SELECT city FROM employees;

-- Question 10: How can you list all cities from customers and employees, including duplicates?
-- Explanation: Use `UNION ALL` to combine results without removing duplicates.
-- Answer:
SELECT city FROM customers
UNION ALL
SELECT city FROM employees;

-- Question 11: How do you calculate total order amount per customer?
-- Explanation: Use `LEFT JOIN` with `GROUP BY` to aggregate order amounts, including customers without orders.
-- Answer:
SELECT c.customer_id, c.first_name, c.last_name, SUM(o.order_amount) AS total_spent
FROM customers c
LEFT JOIN orders o ON c.customer_id = c.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- Question 12: How can you list employees and their managers?
-- Explanation: Use a self-join on the `employees` table to link employees to their managers.
-- Answer:
SELECT e1.employee_id, e1.first_name, e1.last_name, e2.first_name AS manager_name
FROM employees e1
INNER JOIN employees e2 ON e1.manager_id = e2.employee_id;

-- Question 13: How do you find the top 3 orders by amount with customer names?
-- Explanation: Use `INNER JOIN` with `ORDER BY` and `LIMIT` to sort and restrict results.
-- Answer:
SELECT c.first_name, c.last_name, o.order_amount
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
ORDER BY o.order_amount DESC
LIMIT 3;

-- Question 14: How can you combine customer and employee names into a single list with roles?
-- Explanation: Use `UNION` with a constant column to distinguish between customers and employees.
-- Answer:
SELECT first_name, last_name, 'Customer' AS role
FROM customers
UNION
SELECT first_name, last_name, 'Employee' AS role
FROM employees;

-- Question 15: How do you find orders for electronics products from Los Angeles customers?
-- Explanation: Use multiple `INNER JOIN`s with `WHERE` conditions to filter by city and product category.
-- Answer:
SELECT o.order_id, c.first_name, c.last_name, p.product_name
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id
INNER JOIN order_details od ON o.order_id = od.order_id
INNERJOIN products p ON od.product_id = p.product_id
WHERE c.city = 'Los Angeles' AND p.category = 'Electronics';

-- =====================================
-- Final Notes
-- =====================================
-- - Ensure the `mysql_learning` database is set up with the sample datasets (customers.csv, orders.csv, products.csv, employees.csv) loaded.
-- - Run these queries in a MySQL client (e.g., MySQL Workbench) to practice and verify results.
-- - Use the questions to test your understanding, and modify conditions (e.g., cities, categories) for additional practice.
-- - For further learning, explore the `Window_Functions.sql` script in the `intermediate/` folder.
