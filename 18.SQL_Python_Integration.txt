SQL_Python_Integration.txt
=========================
Notes on integrating MySQL with Python for data analysts and scientists.
These notes cover connecting to MySQL, executing queries, handling data with pandas, and best practices.
Assumes MySQL 8.0+ and the 'mysql_learning' database with sample datasets (customers.csv, orders.csv, products.csv).
Requires Python 3.8+, pymysql, and pandas libraries.

1. Overview
----------
- Python integrates with MySQL using libraries like pymysql (low-level) and pandas (high-level).
- Use pymysql for direct SQL execution and control.
- Use pandas for efficient data manipulation and analysis with DataFrames.
- Common tasks: querying data, inserting/updating records, handling errors, and performing analytics.

2. Setting Up
-------------
- Install libraries: `pip install pymysql pandas`
- Configure connection:
  - Host: Typically 'localhost' or a remote server IP.
  - User/Password: MySQL credentials.
  - Database: Target database (e.g., 'mysql_learning').
  - Charset: Use 'utf8mb4' for full Unicode support.
  Example:
    db_config = {
        'host': 'localhost',
        'user': 'your_username',
        'password': 'your_password',
        'database': 'mysql_learning',
        'charset': 'utf8mb4'
    }

3. Connecting to MySQL
----------------------
- Use pymysql.connect(**db_config) to establish a connection.
- Always close connections using try/finally or context managers to prevent resource leaks.
- Example:
    import pymysql
    try:
        connection = pymysql.connect(**db_config)
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM customers")
            results = cursor.fetchall()
    finally:
        connection.close()

4. Executing Queries
-------------------
- Use cursor.execute() for SELECT, INSERT, UPDATE, DELETE queries.
- Fetch results with cursor.fetchall(), cursor.fetchone(), or cursor.fetchmany().
- Parameterized queries prevent SQL injection:
    query = "SELECT * FROM customers WHERE city = %s"
    cursor.execute(query, ('New York',))
- Commit changes for INSERT/UPDATE/DELETE with connection.commit().

5. Using Pandas
---------------
- Load query results into a DataFrame with pandas.read_sql(query, connection).
- Write DataFrames to MySQL with df.to_sql('table_name', connection, if_exists='replace/append').
- Example:
    import pandas as pd
    df = pd.read_sql("SELECT * FROM orders", connection)
    df.to_sql('new_table', connection, if_exists='replace', index=False)
- Perform analytics (e.g., groupby, mean, std) using pandas after fetching data.

6. Error Handling
-----------------
- Handle common errors:
  - OperationalError: Connection issues (e.g., wrong credentials).
  - IntegrityError: Constraint violations (e.g., duplicate keys, SQLSTATE 1062).
  - ProgrammingError: Invalid SQL syntax or missing objects.
- Example:
    from pymysql.err import IntegrityError
    try:
        cursor.execute("INSERT INTO customers (customer_id, first_name) VALUES (%s, %s)", (1, 'John'))
        connection.commit()
    except IntegrityError as e:
        if e.args[0] == 1062:
            print("Duplicate customer ID")
        else:
            print(f"Error: {e}")

7. Transactions
---------------
- Use connection.begin() and connection.commit()/rollback() for atomic operations.
- Ensure data integrity for multiple statements.
- Example:
    connection.begin()
    try:
        cursor.execute("INSERT INTO orders ...")
        cursor.execute("UPDATE customers ...")
        connection.commit()
    except:
        connection.rollback()

8. Stored Procedures
-------------------
- Call stored procedures with cursor.callproc('procedure_name', (param1, param2)).
- Commit changes after execution.
- Example:
    cursor.callproc('InsertOrderWithValidation', (1, 100.00, 1))
    connection.commit()

9. Best Practices
-----------------
- **Security**: Always use parameterized queries; avoid string concatenation.
- **Resource Management**: Close cursors and connections properly.
- **Error Handling**: Catch specific exceptions for robust scripts.
- **Performance**: Use pandas for large datasets; limit data fetched with WHERE clauses.
- **Testing**: Test scripts with small datasets and verify SQL logic in MySQL first.
- **Credentials**: Store db_config securely (e.g., environment variables, not hardcoded).

10. Common Use Cases
--------------------
- **Data Extraction**: Fetch data into pandas for analysis (e.g., sales trends).
- **Data Loading**: Import CSV files into MySQL using pandas.to_sql.
- **Automation**: Schedule scripts to update/insert data (e.g., daily sales).
- **Analytics**: Combine SQL aggregations with pandas for advanced statistics.

11. Performance Tips
--------------------
- Use indexes on frequently queried columns (e.g., customer_id, order_date).
- Fetch only needed columns to reduce data transfer.
- Use batch inserts (cursor.executemany) for large datasets.
- Leverage SQL for aggregations before loading into pandas.

12. Troubleshooting
-------------------
- Connection errors: Verify host, user, password, and database name.
- Syntax errors: Test SQL queries in MySQL client first.
- Data type mismatches: Ensure Python data types match MySQL column types.
- Missing libraries: Confirm pymysql and pandas are installed.

13. Further Learning
--------------------
- Explore `Statistical_Analysis.sql` for advanced SQL analytics.
- Study `JSON_Features.sql` for handling JSON data in MySQL.
- Use Python libraries like SQLAlchemy for ORM-based integration.
- Learn pandas for advanced data manipulation (e.g., pivot tables, joins).

14. Requirements
---------------
- MySQL 8.0+ with InnoDB engine.
- Python 3.8+ with pymysql and pandas installed.
- Sample datasets (customers.csv, orders.csv, products.csv) loaded in 'mysql_learning'.
- Update db_config with your MySQL credentials before running scripts.

15. Example Workflow
-------------------
1. Connect to MySQL with pymysql.
2. Execute a query to fetch sales data.
3. Load results into a pandas DataFrame.
4. Compute statistics (e.g., mean, std) with pandas.
5. Write results to a new MySQL table or CSV.
Example:
    connection = pymysql.connect(**db_config)
    df = pd.read_sql("SELECT city, SUM(order_amount) AS total FROM orders o JOIN customers c ON o.customer_id = c.customer_id GROUP BY city", connection)
    stats = df.groupby('city')['total'].mean()
    stats.to_sql('city_sales_stats', connection, if_exists='replace')
    connection.close()

=========================
End of SQL_Python_Integration.txt
=========================
